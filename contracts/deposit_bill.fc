#include "imports/stdlib.fc";
#include "utils.fc";

const int err::only_fundraising_contract = 102;
const int err::individual_limit_err = 103;

() set_deposit_withdrawn() impure asm "<b 1 1 u, b> PUSHREF c4 POP";
() set_jettons_claimed() impure asm "<b 1 1 u, b> PUSHREF c4 POP";


int get_deposit_bill_balance() method_id {
  [int balance, _] = get_balance();
  return balance;
}


(slice,int,int,slice) load_data() impure inline {
  slice ds = get_data().begin_parse();
  slice fundraising_contract_address = ds~load_msg_addr();
  int total_coins_deposited = ds~load_coins();
  int individual_limit = ds~load_coins();
  slice user_address = ds~load_msg_addr();
  ds.end_parse();
  return(fundraising_contract_address,total_coins_deposited,individual_limit,user_address);
}

() save_data(slice fundraising_contract_address,int total_coins_deposited,int individual_limit,slice user_address){
  set_data(
    begin_cell()
    .store_slice(fundraising_contract_address)
    .store_coins(total_coins_deposited)
    .store_coins(individual_limit)
    .store_slice(user_address)
    .end_cell()
  );
}


() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
  slice cs = in_msg_full.begin_parse();

  int flags = cs~load_uint(4);

  if(flags & 1){ ;; ignore bounced messages
    return();
  }

  int op = in_msg_body~load_uint(32);
  slice sender = cs~load_msg_addr();

  (slice fundraising_contract_address,int total_coins_deposited,int individual_limit,slice user_address) = load_data();
  int is_fundraising_contract_address = equal_slices(sender,fundraising_contract_address);

  if(op == op::update_investment_to_bill){
    throw_unless(err::only_fundraising_contract,is_fundraising_contract_address);
    int amount = in_msg_body~load_coins();
    int users_total_deposit = total_coins_deposited + amount;
    if(users_total_deposit > individual_limit){
      int delta = users_total_deposit - individual_limit;
      int deposit_to_log = amount - delta;
      total_coins_deposited += deposit_to_log;
      ;; int updated_value = total_coins_deposited + deposit_to_log;
    }
    else {
       total_coins_deposited += amount;
    }
    ;; int updated_value = total_coins_deposited + amount;

    ;; throw_if(err::individual_limit_err,updated_value > individual_limit);
    ;; total_coins_deposited += amount;
    ;; save_data(fundraising_contract_address,total_coins_deposited,individual_limit,investment_ctr,user_address);
  }

  if(op == "initiate_withdrawal"c){ ;; will be invoked if soft cap is not reached and project fails
    throw_unless(err::only_fundraising_contract,is_fundraising_contract_address);
  
    int amount_to_withdraw = total_coins_deposited;

    cell withdrawal_req = begin_cell()
                          .store_uint(process_investor_withdrawal,32)
                          .store_slice(user_address)
                          .store_coins(amount_to_withdraw)
                          .end_cell();
    
    cell msg = begin_cell()
                .store_uint(0x18,6)
                .store_slice(fundraising_contract_address)
                .store_coins(0)
                .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1)
                .store_uint(1,1)
                .store_ref(withdrawal_req)
                .end_cell();


    send_raw_message(msg,128);
    set_deposit_withdrawn();
    return();
  }

  if(op == "initiate_jetton_claim"c){
    throw_unless(err::only_fundraising_contract,is_fundraising_contract_address);

    int amount_invested = total_coins_deposited;
    
    cell jetton_withdrawal_payload = begin_cell()
                                    .store_uint(process_jetton_claim,32)
                                    .store_slice(user_address)
                                    .store_coins(amount_invested)
                                    .end_cell();


    cell msg = begin_cell()
              .store_uint(0x18,6)
              .store_slice(fundraising_contract_address)
              .store_coins(0)
              .store_uint(0,1 + 4 + 4 + 64 + 32 + 1)
              .store_uint(1,1)
              .store_ref(jetton_withdrawal_payload)
              .end_cell();

    send_raw_message(msg,128);
    set_jettons_claimed();
    return();
  }


  set_data(pack_bill_data(fundraising_contract_address,total_coins_deposited,individual_limit,user_address));
}

(slice,int,int,slice) get_deposit_bill_data() method_id {
  return load_data();
}

(int) get_is_deposit_withdrawn() method_id {
  return get_data().begin_parse().preload_int(1);
}

(int) is_jettons_claimed() method_id {
  return get_data().begin_parse().preload_int(1);
}

