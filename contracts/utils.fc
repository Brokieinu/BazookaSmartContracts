#include "imports/stdlib.fc";

const int op::update_investment_to_bill = 2983967449;
const int op::withdraw_from_bill = 3442538399;
const int initiate_withdrawal = 0x2e67312;
const int process_investor_withdrawal = 3631435095;
const int initiate_jetton_claim = 0x9f2b40a;
const int process_jetton_claim = 0xeeb18cc1;
const int DEPLOYMENT_FEES = 48159600;
const int MIN_AMOUNT_TO_INVEST = 5000000000;





const int WORKCHAIN = 0;

const int BOUNCEABLE = 0x18;
const int NON_BOUNCEABLE = 0x10;
const int ONE_TON = 1000000000;
const int SEND_MODE_REGULAR = 0;
const int SEND_MODE_PAY_FEES_SEPARETELY = 1;
const int SEND_MODE_IGNORE_ERRORS = 2;
const int SEND_MODE_DESTROY = 32;
const int SEND_MODE_CARRY_ALL_REMAINING_MESSAGE_VALUE = 64;
const int SEND_MODE_CARRY_ALL_BALANCE = 128;

cell pack_bill_data(slice fund_raising_contract_address, int total_coins_deposit,int individual_limit,slice user_address) inline {
  return begin_cell()
            .store_slice(fund_raising_contract_address)
            .store_coins(total_coins_deposit)
            .store_coins(individual_limit)
            .store_slice(user_address)
            .end_cell();
}

cell calculate_bill_state_init(slice fund_raising_contract_address, slice user_address, int individual_limit,cell bill_code) inline {
  return begin_cell()
            .store_uint(0, 2)
            .store_dict(bill_code)
            .store_dict(pack_bill_data(fund_raising_contract_address, 0, individual_limit,user_address))
            .store_uint(0, 1)
            .end_cell();
}

slice create_address(int wc, int address_hash) inline {
  return begin_cell().store_uint(4, 3)
            .store_int(wc, 8)
            .store_uint(address_hash, 256)
            .end_cell()
            .begin_parse();
}

slice calculate_address_by_state_init(cell state_init) inline {
  return create_address(WORKCHAIN, cell_hash(state_init));
}

slice calculate_bill_address(slice fund_raising_contract_address,int individual_limit,slice user_address, cell bill_code) inline {
  return calculate_address_by_state_init(calculate_bill_state_init(fund_raising_contract_address,user_address,individual_limit,bill_code));
}

;; cell create_msg(int flags, slice to_address, int value) inline {
;;   return begin_cell()
;;             .store_uint(flags, 6)
;;             .store_slice(to_address)
;;             .store_coins(value)
;;             .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1);
;; }