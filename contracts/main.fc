#include "imports/stdlib.fc";

int load_data() inline {
  slice ds = get_data().begin_parse(); ;; geting data from c4 register i.e persistent storage
  return(
    ds~load_uint(64)
  );
}

() save_data(int n) inline {
  set_data(
    begin_cell()
    .store_uint(n,64)
    .end_cell()
  );
}

() recv_internal(cell in_msg_full, slice in_msg_body) impure {
  if(in_msg_body.slice_empty?()){
    return();
  }
  slice cs = in_msg_full.begin_parse();

  int flag = cs~load_uint(4);

  if(flag & 1){
    return();
  }

  ;; This is the number coming when sdk or wallet calling this smart contract in message payload
  int num = in_msg_body~load_uint(64);

  ;; This statement uses the load_data on line 3 to get earlier value we stored in contract 
  int get_stored_num = load_data();

  get_stored_num += num;

  ;; save data stores the updated value of num.
  save_data(get_stored_num);
}
 
int get_latest_num() method_id {
  return load_data();
}